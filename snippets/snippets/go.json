{
    "single import": {
        "prefix": "import",
        "body": "import \"${1:package}\"",
        "description": "Snippet for import statement"
    },
    "multiple imports": {
        "prefix": "imports",
        "body": "import (\n\t\"${1:package}\"\n)",
        "description": "Snippet for a import block"
    },
    "type function declaration": {
        "prefix": "tyf",
        "body": "type ${1:name} func($3) $4",
        "description": "Snippet for a type function declaration"
    },
    "type interface declaration": {
        "prefix": "tyi",
        "body": "type ${1:name} interface {\n\t$0\n}",
        "description": "Snippet for a type interface"
    },
    "type struct declaration": {
        "prefix": "tys",
        "body": "type ${1:name} struct {\n\t$0\n}",
        "description": "Snippet for a struct declaration"
    },
    "package main and main function": {
        "prefix": "pkgm",
        "body": "package main\n\nfunc main() {\n\t$0\n}",
        "description": "Snippet for main package & function"
    },
    "function declaration": {
        "prefix": "func",
        "body": "func $1($2) $3 {\n\t$0\n}",
        "description": "Snippet for function declaration"
    },
    "switch statement": {
        "prefix": "switch",
        "body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
        "description": "Snippet for switch statement"
    },
    "select statement": {
        "prefix": "select",
        "body": "select {\ncase ${1:condition}:\n\t$0\n}",
        "description": "Snippet for select statement"
    },
    "case clause": {
        "prefix": "case",
        "body": "case ${1:condition}:$0",
        "description": "Snippet for case clause"
    },
    "for statement": {
        "prefix": "for",
        "body": "for ${1}{\n\t$0\n}",
        "description": "Snippet for a pure for loop"
    },
    "for n statement": {
        "prefix": "fori",
        "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
        "description": "Snippet for a for loop"
    },
    "for range statement": {
        "prefix": "forr",
        "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
        "description": "Snippet for a for range loop"
    },
    "map declaration": {
        "prefix": "map",
        "body": "map[${1:type}]${2:type}",
        "description": "Snippet for a map"
    },
    "if statement": {
        "prefix": "if",
        "body": "if ${1:condition} {\n\t$0\n}",
        "description": "Snippet for if statement"
    },
    "else branch": {
        "prefix": "else",
        "body": "else {\n\t$0\n}",
        "description": "Snippet for else branch"
    },
    "if else statement": {
        "prefix": "ifelse",
        "body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
        "description": "Snippet for if else"
    },
    "if err != nil": {
        "prefix": "iferr",
        "body": "if err != nil {\n\t${0}\n}",
        "description": "Snippet for if err != nil"
    },
    "fmt.Println": {
        "prefix": "println",
        "body": "fmt.Println(\"$1\")",
        "description": "Snippet for fmt.Println()"
    },
    "fmt.Printf": {
        "prefix": "printf",
        "body": "fmt.Printf(\"$1\", ${2:var})",
        "description": "Snippet for fmt.Printf()"
    },
    "log.Println": {
        "prefix": "lprintln",
        "body": "log.Println(\"$1\")",
        "description": "Snippet for log.Println()"
    },
    "log.Printf": {
        "prefix": "lprintf",
        "body": "log.Printf(\"$1\", ${2:var})",
        "description": "Snippet for log.Printf()"
    },
    "log variable content": {
        "prefix": "lprintfv",
        "body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "Snippet for log.Printf() with variable content"
    },
    "t.Log": {
        "prefix": "tlog",
        "body": "t.Log(\"$1\")",
        "description": "Snippet for t.Log()"
    },
    "t.Logf": {
        "prefix": "tlof",
        "body": "t.Logf(\"$1\", ${2:var})",
        "description": "Snippet for t.Logf()"
    },
    "t.Logf variable content": {
        "prefix": "tlogfv",
        "body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "Snippet for t.Logf() with variable content"
    },
    "http ResponseWriter *Request": {
        "prefix": "wr",
        "body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
        "description": "Snippet for http Response"
    },
    "http.HandleFunc": {
        "prefix": "handlef",
        "body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
        "description": "Snippet for http.HandleFunc()"
    },
    "http handler declaration": {
        "prefix": "funchandle",
        "body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
        "description": "Snippet for http handler declaration"
    },
    "goroutine anonymous function": {
        "prefix": "go",
        "body": "go func($1) {\n\t$0\n}($2)",
        "description": "Snippet for anonymous goroutine declaration"
    },
    "test function": {
        "prefix": "funct",
        "body": "func Test$1(t *testing.T) {\n\t$0\n}",
        "description": "Snippet for Test function"
    },
    "test main": {
        "prefix": "functm",
        "body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
        "description": "Snippet for TestMain function"
    },
    "benchmark function": {
        "prefix": "funcbench",
        "body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
        "description": "Snippet for Benchmark function"
    },
    "table driven test": {
        "prefix": "functtbl",
        "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
        "description": "Snippet for table driven test"
    },
    "main function": {
        "prefix": "fmain",
        "body": "func main() {\n\t$1\n}",
        "description": "Snippet for main function"
    },
    "method declaration": {
        "prefix": "method",
        "body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
        "description": "Snippet for method declaration"
    },
    "hello world web app": {
        "prefix": "helloweb",
        "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "description": "Snippet for sample hello world webapp"
    },
    "sort implementation": {
        "prefix": "sort",
        "body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
        "description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
    },
    "json tag": {
        "prefix": "json",
        "body": "`json:\"$1\"`",
        "description": "Snippet for struct json tag"
    },
    "xml tag": {
        "prefix": "xml",
        "body": "`xml:\"$1\"`",
        "description": "Snippet for struct xml tag"
    },
    "if key in a map": {
        "prefix": "ifok",
        "body": "if ${1:value}, ok := ${2:map}[${3:key}]; ok {\n\t$4\n}"
    }
}
