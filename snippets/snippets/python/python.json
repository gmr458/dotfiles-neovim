{
    "try/except": {
        "prefix": "tryexcept",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}"
        ],
        "description": "Code snippet for a try/except statement"
    },
    "try/finally": {
        "prefix": "tryfinally",
        "body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
        "description": "Code snippet for a try/finally statement"
    },
    "try/except/else": {
        "prefix": "tryexceptelse",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/else statement"
    },
    "try/except/finally": {
        "prefix": "tryexceptfinally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "finally:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/finally statement"
    },
    "try/except/else/finally": {
        "prefix": "tryexceptelsefinally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}",
            "finally:",
            "\t${6:pass}"
        ],
        "description": "Code snippet for a try/except/else/finally statement"
    },
    "def(class method)": {
        "prefix": "method",
        "body": [
            "def ${1:funcname}(self, ${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a class method"
    },
    "def(static class method)": {
        "prefix": "staticmethod",
        "body": [
            "@staticmethod",
            "def ${1:funcname}(${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a static class method"
    },
    "def(abstract class method)": {
        "prefix": "abstractmethod",
        "body": [
            "def ${1:funcname}(self, ${2:parameter_list}):",
            "\traise NotImplementedError"
        ],
        "description": "Code snippet for an abstract class method"
    },
    "lambda": {
        "prefix": "lambda",
        "body": ["lambda ${1:parameter_list}: ${2:expression}"],
        "description": "Code snippet for a lambda statement"
    },
    "if(main)": {
        "prefix": "__main__",
        "body": ["if __name__ == \"__main__\":", "    ${1:pass}"],
        "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
    },
    "async/def": {
        "prefix": "asyncdef",
        "body": [
            "async def ${1:funcname}(${2:parameter_list}):",
            "\t${3:pass}"
        ],
        "description": "Code snippet for an async statement"
    },
    "async/for": {
        "prefix": "asyncfor",
        "body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"],
        "description": "Code snippet for an async for statement"
    },
    "async/for/else": {
        "prefix": "asyncforelse",
        "body": [
            "async for ${1:target} in ${2:iter}:",
            "\t${3:block}",
            "else:",
            "\t${4:block}"
        ],
        "description": "Code snippet for an async for statement with else"
    },
    "async/with": {
        "prefix": "asyncwith",
        "body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"],
        "description": "Code snippet for an async with statement"
    }
}
