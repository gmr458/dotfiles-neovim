{
    "allow": {
        "prefix": "allow",
        "body": ["#![allow(${1})]"],
        "description": "#![allow(…)]"
    },
    "deny": {
        "prefix": "deny",
        "body": ["#![deny(${1})]"],
        "description": "#![deny(…)]"
    },
    "warn": {
        "prefix": "warn",
        "body": ["#![warn(${1})]"],
        "description": "#![warn(…)]"
    },
    "no_std": {
        "prefix": "no_std",
        "body": ["#![no_std]"],
        "description": "#![no_std]"
    },
    "no_core": {
        "prefix": "no_core",
        "body": ["#![no_core]"],
        "description": "#![no_core]"
    },
    "feature": {
        "prefix": "feature",
        "body": ["#![feature(${1})]"],
        "description": "#![feature(…)]"
    },
    "macro_use": {
        "prefix": "macro_use",
        "body": ["#[macro_use(${1})]"],
        "description": "#[macro_use(…)]"
    },
    "repr": {
        "prefix": "repr",
        "body": ["#[repr(${1})]"],
        "description": "#[repr(…)]"
    },
    "cfg": {
        "prefix": "cfg",
        "body": ["#[cfg(${1})]"],
        "description": "#[cfg(…)]"
    },
    "cfg_attr": {
        "prefix": "cfg_attr",
        "body": ["#[cfg_attr(${1}, ${2})]"],
        "description": "#[cfg_attr(…, …)]"
    },
    "derive": {
        "prefix": "derive",
        "body": ["#[derive(${1})]"],
        "description": "#[derive(…)]"
    },
    "else": {
        "prefix": "else",
        "body": ["else {", "    ${1:unimplemented!();}", "}"],
        "description": "else { … }"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "#[derive(Debug)]",
            "enum ${1:Name} {",
            "    ${2:Variant1},",
            "    ${3:Variant2},",
            "}"
        ],
        "description": "enum … { … }"
    },
    "fn": {
        "prefix": "fn",
        "body": [
            "fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
            "    ${5:unimplemented!();}",
            "}"
        ],
        "description": "fn …(…) { … }"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for ${1:pat} in ${2:expr} {",
            "    ${3:unimplemented!();}",
            "}"
        ],
        "description": "for … in … { … }"
    },
    "if-let": {
        "prefix": "iflet",
        "body": [
            "if let ${1:Some(pat)} = ${2:expr} {",
            "    ${0:unimplemented!();}",
            "}"
        ],
        "description": "if let … = … { … }"
    },
    "if": {
        "prefix": "if",
        "body": ["if ${1:condition} {", "    ${2:unimplemented!();}", "}"],
        "description": "if … { … }"
    },
    "impl-trait": {
        "prefix": "impltrait",
        "body": [
            "impl ${1:Trait} for ${2:Type} {",
            "    ${3:// add code here}",
            "}"
        ],
        "description": "impl … for … { … }"
    },
    "impl": {
        "prefix": "impl",
        "body": ["impl ${1:Type} {", "    ${2:// add code here}", "}"],
        "description": "impl … { … }"
    },
    "loop": {
        "prefix": "loop",
        "body": ["loop {", "    ${2:unimplemented!();}", "}"],
        "description": "loop { … }"
    },
    "macro_rules": {
        "prefix": "macro_rules",
        "body": ["macro_rules! ${1:name} {", "    (${2}) => (${3})", "}"],
        "description": "macro_rules! … { … }"
    },
    "main": {
        "prefix": "main",
        "body": ["fn main() {", "    ${1:unimplemented!();}", "}"],
        "description": "fn main() { … }"
    },
    "match": {
        "prefix": "match",
        "body": [
            "match ${1:expr} {",
            "    ${2:Some(expr)} => ${3:expr},",
            "    ${4:None} => ${5:expr},",
            "}"
        ],
        "description": "match … { … }"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "#[derive(Debug)]",
            "struct ${1:Name} {",
            "    ${2:field}: ${3:Type}",
            "}"
        ],
        "description": "struct … { … }"
    },
    "test": {
        "prefix": "test",
        "body": [
            "#[test]",
            "fn ${1:name}() {",
            "    ${2:unimplemented!();}",
            "}"
        ],
        "description": "#[test]"
    },
    "trait": {
        "prefix": "trait",
        "body": ["trait ${1:Name} {", "    ${2:// add code here}", "}", ""],
        "description": "trait … { … }"
    },
    "while-let": {
        "prefix": "whilelet",
        "body": [
            "while let ${1:Some(pat)} = ${2:expr} {",
            "    ${0:unimplemented!();}",
            "}"
        ],
        "description": "while let … = … { … }"
    },
    "while": {
        "prefix": "while",
        "body": ["while ${1:condition} {", "    ${2:unimplemented!();}", "}"],
        "description": "while … { … }"
    }
}
