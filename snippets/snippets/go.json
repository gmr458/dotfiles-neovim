{
    "single import": {
        "prefix": "import",
        "body": "import \"${1}\"",
        "description": "import statement"
    },
    "multiple imports": {
        "prefix": "imports",
        "body": "import (\n\t\"${1}\"\n)",
        "description": "import block statement"
    },
    "type function declaration": {
        "prefix": "tyf",
        "body": "type ${1} func($3) $4",
        "description": "type function declaration"
    },
    "type interface declaration": {
        "prefix": "tyi",
        "body": "type ${1} interface {\n\t$0\n}",
        "description": "type interface declaration"
    },
    "type struct declaration": {
        "prefix": "tys",
        "body": "type ${1} struct {\n\t$0\n}",
        "description": "type struct declaration"
    },
    "package main and main function": {
        "prefix": "pkgm",
        "body": "package main\n\nfunc main() {\n\t$0\n}",
        "description": "main package & main function"
    },
    "function declaration": {
        "prefix": "func",
        "body": "func $1($2) $3 {\n\t$0\n}",
        "description": "function declaration"
    },
    "switch statement": {
        "prefix": "switch",
        "body": [
            "switch ${1} {",
            "case ${2}:",
            "\t${3}",
            "default ${4}:",
            "\t${5}",
            "}"
        ],
        "description": "switch statement"
    },
    "switch statement 2": {
        "prefix": "switch2",
        "body": [
            "switch ${1} {",
            "case ${2}:",
            "\t${3}",
            "case ${4}:",
            "\t${5}",
            "default ${6}:",
            "\t${7}",
            "}"
        ],
        "description": "switch statement 2"
    },
    "switch statement 3": {
        "prefix": "switch3",
        "body": [
            "switch ${1} {",
            "case ${2}:",
            "\t${3}",
            "case ${4}:",
            "\t${5}",
            "case ${6}:",
            "\t${7}",
            "default ${8}:",
            "\t${9}",
            "}"
        ],
        "description": "switch statement 3"
    },
    "switch statement 4": {
        "prefix": "switch4",
        "body": [
            "switch ${1} {",
            "case ${2}:",
            "\t${3}",
            "case ${4}:",
            "\t${5}",
            "case ${6}:",
            "\t${7}",
            "case ${8}:",
            "\t${9}",
            "default ${10}:",
            "\t${11}",
            "}"
        ],
        "description": "switch statement 4"
    },
    "switch statement 5": {
        "prefix": "switch5",
        "body": [
            "switch ${1} {",
            "case ${2}:",
            "\t${3}",
            "case ${4}:",
            "\t${5}",
            "case ${6}:",
            "\t${7}",
            "case ${8}:",
            "\t${9}",
            "case ${10}:",
            "\t${11}",
            "default ${12}:",
            "\t${13}",
            "}"
        ],
        "description": "switch statement 5"
    },
    "select statement": {
        "prefix": "select",
        "body": "select {\ncase ${1}:\n\t$0\n}",
        "description": "select statement"
    },
    "case clause": {
        "prefix": "case",
        "body": "case ${1}:\n\t$0",
        "description": "case clause"
    },
    "for statement": {
        "prefix": "for",
        "body": "for ${1} {\n\t$0\n}",
        "description": "for loop"
    },
    "for n statement": {
        "prefix": "fori",
        "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
        "description": "for loop i"
    },
    "for range statement": {
        "prefix": "forr",
        "body": "for ${1}, ${2} := range ${3} {\n\t$0\n}",
        "description": "for range loop"
    },
    "map declaration": {
        "prefix": "map",
        "body": "map[${1}]${2}",
        "description": "map"
    },
    "if statement": {
        "prefix": "if",
        "body": "if ${1} {\n\t$0\n}",
        "description": "if statement"
    },
    "else branch": {
        "prefix": "else",
        "body": "else {\n\t$0\n}",
        "description": "else block"
    },
    "if else statement": {
        "prefix": "ifelse",
        "body": "if ${1} {\n\t$2\n} else {\n\t$0\n}",
        "description": "if else statement"
    },
    "if err != nil": {
        "prefix": "iferr",
        "body": "if err != nil {\n\t${0}\n}",
        "description": "if err != nil"
    },
    "fmt.Println": {
        "prefix": "println",
        "body": "fmt.Println(\"$1\")",
        "description": "fmt.Println()"
    },
    "fmt.Printf": {
        "prefix": "printf",
        "body": "fmt.Printf(\"$1\", ${2})",
        "description": "fmt.Printf()"
    },
    "log.Println": {
        "prefix": "lprintln",
        "body": "log.Println(\"$1\")",
        "description": "log.Println()"
    },
    "log.Printf": {
        "prefix": "lprintf",
        "body": "log.Printf(\"$1\", ${2})",
        "description": "log.Printf()"
    },
    "log variable content": {
        "prefix": "lprintfv",
        "body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "log.Printf() with variable content"
    },
    "t.Log": {
        "prefix": "tlog",
        "body": "t.Log(\"$1\")",
        "description": "t.Log()"
    },
    "t.Logf": {
        "prefix": "tlof",
        "body": "t.Logf(\"$1\", ${2:var})",
        "description": "t.Logf()"
    },
    "t.Logf variable content": {
        "prefix": "tlogfv",
        "body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "t.Logf() with variable content"
    },
    "http ResponseWriter *Request": {
        "prefix": "wr",
        "body": "w http.ResponseWriter, r *http.Request${0}",
        "description": "http Response"
    },
    "http handler declaration": {
        "prefix": "funchandle",
        "body": "func $1(w http.ResponseWriter, r *http.Request) {\n\t$0\n}",
        "description": "http handler declaration"
    },
    "goroutine anonymous function": {
        "prefix": "go",
        "body": "go func($1) {\n\t$0\n}($2)",
        "description": "anonymous goroutine declaration"
    },
    "test function": {
        "prefix": "funct",
        "body": "func Test$1(t *testing.T) {\n\t$0\n}",
        "description": "test function"
    },
    "test main": {
        "prefix": "functm",
        "body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
        "description": "TestMain function"
    },
    "benchmark function": {
        "prefix": "funcbench",
        "body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
        "description": "benchmark function"
    },
    "table driven test": {
        "prefix": "functtbl",
        "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
        "description": "table driven test"
    },
    "main function": {
        "prefix": "fmain",
        "body": "func main() {\n\t$1\n}",
        "description": "main function"
    },
    "method declaration": {
        "prefix": "method",
        "body": "func (${1} ${2}) ${3}($4) $5 {\n\t$0\n}",
        "description": "method declaration"
    },
    "hello world web app": {
        "prefix": "helloweb",
        "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "description": "sample hello world webapp"
    },
    "json tag": {
        "prefix": "json",
        "body": "`json:\"$1\"`",
        "description": "Snippet for struct json tag"
    },
    "xml tag": {
        "prefix": "xml",
        "body": "`xml:\"$1\"`",
        "description": "Snippet for struct xml tag"
    },
    "if key in a map": {
        "prefix": "ifok",
        "body": "if ${1}, ok := ${2}[${3}]; ok {\n\t$4\n}"
    }
}
