{
    "#!/usr/bin/env python": {
        "prefix": "env",
        "body": "#!/usr/bin/env python\n$0",
        "description": "Adds shebang line for default python interpreter."
    },
    "#!/usr/bin/env python3": {
        "prefix": "env3",
        "body": "#!/usr/bin/env python3\n$0",
        "description": "Adds shebang line for default python 3 interpreter."
    },
    "# -*- coding=utf-8 -*-": {
        "prefix": "enc",
        "body": "# -*- coding=utf-8 -*-\n$0",
        "description": "set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263."
    },
    "# coding=utf-8": {
        "prefix": "enco",
        "body": "# coding=utf-8\n$0",
        "description": "Set default python3 encoding specification to utf-8, by default this is the encoding for python3.x as it is mentioned in pep-3120."
    },
    "from future import ...": {
        "prefix": "fenc",
        "body": [
            "# -*- coding: utf-8 -*-",
            "from __future__ import absolute_import, division, print_function, unicode_literals"
        ],
        "description": "Import future statement definitions for python2.x scripts using utf-8 as encoding."
    },
    "from future import ... v1": {
        "prefix": "fenco",
        "body": [
            "# coding: utf-8",
            "from __future__ import absolute_import, division, print_function, unicode_literals"
        ],
        "description": "Import future statement definitions for python3.x scripts using utf-8 as encoding."
    },
    "import": {
        "prefix": "import",
        "body": "import ${1:package/module}$0",
        "description": "Import a package or module"
    },
    "from ... import ...": {
        "prefix": "from",
        "body": "from ${1:package/module} import ${2:names}$0",
        "description": "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table."
    },
    "class": {
        "prefix": "class",
        "body": ["class ${1:classname}(${2:object}):", "\t${3:pass}"],
        "description": "Code snippet for a class definition"
    },
    "New class": {
        "prefix": "classinit",
        "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
        "description": "Code snippet for a class definition."
    },
    "New method w/ return": {
        "prefix": "methodreturntype",
        "body": "def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
        "description": "Code snippet for a class method definition."
    },
    "New function": {
        "prefix": "def",
        "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description": "Code snippet for function definition."
    },
    "New function w/ return": {
        "prefix": "defreturntype",
        "body": "def ${1:fname}(${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
        "description": "Code snippet for function definition."
    },
    "New property": {
        "prefix": "property",
        "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
        "description": "New property: get and set via decorator"
    },
    "if": {
        "prefix": "if",
        "body": "if ${1:condition}:\n\t${2:pass}$0",
        "description": "Code snippet for the if statement."
    },
    "if/else": {
        "prefix": "ifelse",
        "body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
        "description": "Code snippet for an if statement with else"
    },
    "elif": {
        "prefix": "elif",
        "body": ["elif ${1:expression}:", "\t${2:pass}"],
        "description": "Code snippet for an elif"
    },
    "else": {
        "prefix": "else",
        "body": ["else:", "\t${1:pass}"],
        "description": "Code snippet for an else"
    },
    "for": {
        "prefix": "for",
        "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
        "description": "Code snippet to create a for loop structure."
    },
    "for/else": {
        "prefix": "forelse",
        "body": [
            "for ${1:target_list} in ${2:expression_list}:",
            "\t${3:pass}",
            "else:",
            "\t${4:pass}"
        ],
        "description": "Code snippet for a for loop with else"
    },
    "while": {
        "prefix": "while",
        "body": "while ${1:condition}:\n\t${2:pass}$0",
        "description": "Code snippet to create a while loop structure."
    },
    "while/else": {
        "prefix": "whileelse",
        "body": [
            "while ${1:expression}:",
            "\t${2:pass}",
            "else:",
            "\t${3:pass}"
        ],
        "description": "Code snippet for a while loop with else"
    },
    "with": {
        "prefix": "with",
        "body": ["with ${1:expression} as ${2:target}:", "\t${3:pass}"],
        "description": "Code snippet for a with statement"
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
        "description": "Create implicitly all the code at the top level using the __name__ special variable."
    }
}
