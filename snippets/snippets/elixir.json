{
    "defmodule": {
        "prefix": "defmo",
        "body": ["defmodule ${1:module} do", "  $0", "end"],
        "description": "Define a module"
    },
    "def": {
        "prefix": "def",
        "body": ["def ${1:name}() do", "  $0", "end"],
        "description": "Define a function"
    },
    "defp": {
        "prefix": "defp",
        "body": ["defp ${1:name}() do", "  $0", "end"],
        "description": "Define a private function"
    },
    "if .. do .. end": {
        "prefix": "if",
        "body": ["if ${1:condition} do", "  $0", "end"]
    },
    "if .. do:": {
        "prefix": "if:",
        "body": "if ${1:condition}, do: $0"
    },
    "if .. do .. else .. end": {
        "prefix": "ifelse",
        "body": ["if ${1:condition} do", "  $2", "else", "  $0", "end"]
    },
    "if .. do: .. else:": {
        "prefix": "ifelse:",
        "body": "if ${1:condition}, do: $2, else: $0"
    },
    "cond": {
        "prefix": "cond",
        "body": ["cond do", "  $1 -> ", "  $0", "end"]
    },
    "case": {
        "prefix": "case",
        "body": ["case $1 do", "  $2 -> ", "    $0", "end"]
    },
    "for": {
        "prefix": "for",
        "body": ["for ${1:item} <- ${2:items} do", "  $0", "end"]
    },
    "def + doc": {
        "prefix": "defdoc",
        "body": [
            "@doc \"\"\"",
            "${1:doc}",
            "\"\"\"",
            "def ${2:name} do",
            "  $0",
            "end"
        ]
    },
    "def + spec": {
        "prefix": "defspec",
        "body": [
            "@spec ${1:name}(${2:args}) :: ${3:no_return}",
            "def $1{4:args} do",
            "  $0",
            "end"
        ]
    },
    "def + doc + spec": {
        "prefix": "defdocspec",
        "body": [
            "@doc \"\"\"",
            "${1:doc}",
            "\"\"\"",
            "@spec ${2:name}(${3:args}) :: ${4:no_return}",
            "def $2{5:args} do",
            "  $0",
            "end"
        ]
    },
    "do": {
        "prefix": "do",
        "body": ["do", "  $0", "end"]
    },
    "doc": {
        "prefix": "doc",
        "body": ["@doc \"\"\"", "$0", "\"\"\""]
    },
    "doc s": {
        "prefix": "docs",
        "body": ["@doc ~S\"\"\"", "$0", "\"\"\""]
    },
    "doc false": {
        "prefix": "docf",
        "body": "@doc false"
    },
    "moduledoc": {
        "prefix": "moduledoc",
        "body": ["@moduledoc \"\"\"", "$0", "\"\"\""]
    },
    "moduledoc s": {
        "prefix": "moduledocs",
        "body": ["@moduledoc ~S\"\"\"", "$0", "\"\"\""]
    },
    "moduledoc false": {
        "prefix": "moduledocf",
        "body": "@moduledoc false"
    },
    "require": {
        "prefix": "req",
        "body": "require ${0:Logger}"
    },
    "test": {
        "prefix": "test",
        "body": ["test \"${1:name}\" do", "  $0", "end"]
    },
    "des": {
        "prefix": "desc",
        "body": ["describe \"${1:test group subject}\" do", "  $0", "end"]
    },
    "pipe char": {
        "prefix": "|",
        "body": "|> $0"
    },
    "pipe into each": {
        "prefix": "|>each",
        "body": "|> Enum.each($0)"
    },
    "pipe into map": {
        "prefix": "|>map",
        "body": "|> Enum.map($0)"
    },
    "pipe into filter": {
        "prefix": "|>filter",
        "body": "|> Enum.filter($0)"
    },
    "pipe into reduce": {
        "prefix": "|>reduce",
        "body": "|> Enum.reduce(${1:acc}, fn ${2}, ${3:acc} -> $0 end)"
    },
    "word list": {
        "prefix": "wl",
        "body": "~w($0)"
    },
    "atom list": {
        "prefix": "al",
        "body": "~w($0)a"
    }
}
